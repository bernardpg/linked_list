typedef struct node


{


	int num;


	struct node *next;


}NODE;




NODE*get_node(void)


{


	NODE *link;//產生一個link


	link = (NODE*)malloc(sizeof(NODE));//產生node


	if (link == NULL)


	{


		printf("memory_leak");


		//exit(1);
	}


	return(link);


}

NODE*head;


NODE *add_node(NODE*head, NODE*ptr, int data)


{


	NODE *new_node;


	new_node = get_node();


	new_node->num = data;


	new_node->next = NULL;//initialize


	if (ptr == NULL) //first_point


	{


		new_node->next = head;


		head = new_node;


	}


	else


	{


		if (ptr->next == NULL)//boundary_condition(last_point)


		{


			new_node->next = NULL;


			ptr = new_node;


		}


		else


		{


			new_node->next = ptr->next;//generalize(ptr structure point next)


			ptr = new_node;


		}


	}


	return(head);


}


NODE *free_node(NODE *p)//delete linked_list_node


{


	free(p);


};


NODE *cut_node(NODE*head, NODE*ptr)


{


	NODE*previous; //指向前一個節點


	if (ptr == head) //現在這個點也是起點


	{


		head = head->next;


		return(head);


	}


	else


	{


		previous = head;//find_ptr of the previous


		while (previous->next != ptr)


			previous = previous->next;


		if (ptr->next = NULL)


			previous->next = NULL;


		else


			previous->next = ptr->next;


	}


	free_node(ptr);


	return(head);


}
